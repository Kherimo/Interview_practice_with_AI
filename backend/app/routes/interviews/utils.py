import os
import json
import requests
import time
import logging
from datetime import datetime, timedelta
from app.database import InterviewSession, InterviewQuestion, InterviewAnswer

logger = logging.getLogger(__name__)

def generate_question(prompt: str) -> str:
    """Generate interview question using Gemini API, optimized for interview practice."""
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        logger.error("GEMINI_API_KEY not found in environment variables")
        raise ValueError("GEMINI_API_KEY not found in environment variables")

    try:
        endpoint = (
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite:generateContent"
        )
        
        # Prompt ƒë∆∞·ª£c t·ªëi ∆∞u cho luy·ªán ph·ªèng v·∫•n
        enhanced_prompt = f"""
B·∫°n l√† m·ªôt chuy√™n gia ph·ªèng v·∫•n gi√†u kinh nghi·ªám. H√£y t·∫°o ra m·ªôt c√¢u h·ªèi ph·ªèng v·∫•n ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh sau:

{prompt}

Y√™u c·∫ßu:
- C√¢u h·ªèi ph·∫£i r√µ r√†ng, d·ªÖ hi·ªÉu v√† ph√π h·ª£p v·ªõi v·ªã tr√≠ ·ª©ng tuy·ªÉn
- T·∫≠p trung v√†o k·ªπ nƒÉng th·ª±c t·∫ø v√† kinh nghi·ªám l√†m vi·ªác
- ƒê·ªô kh√≥ ph√π h·ª£p v·ªõi m·ª©c kinh nghi·ªám
- C√¢u h·ªèi m·ªü ƒë·ªÉ ·ª©ng vi√™n c√≥ th·ªÉ tr√¨nh b√†y chi ti·∫øt
- Ph√π h·ª£p v·ªõi vƒÉn h√≥a doanh nghi·ªáp Vi·ªát Nam

Ch·ªâ tr·∫£ v·ªÅ c√¢u h·ªèi, kh√¥ng c·∫ßn gi·∫£i th√≠ch th√™m.
"""
        
        payload = {"contents": [{"parts": [{"text": enhanced_prompt}]}]}
        
        logger.info(f"Calling Gemini API with prompt length: {len(enhanced_prompt)}")
        logger.info(f"API Endpoint: {endpoint}")
        
        resp = requests.post(endpoint, params={"key": api_key}, json=payload, timeout=30)
        
        logger.info(f"Gemini API response status: {resp.status_code}")
        
        if not resp.ok:
            logger.error(f"Gemini API error: {resp.status_code} - {resp.text}")
            raise RuntimeError(f"Gemini API returned {resp.status_code}: {resp.text}")
        
        data = resp.json()
        logger.info(f"Gemini API response structure: {list(data.keys()) if isinstance(data, dict) else 'Not a dict'}")
        
        if "candidates" not in data or not data["candidates"]:
            logger.error(f"Unexpected Gemini API response format: {data}")
            raise RuntimeError("Unexpected response format from Gemini API")
        
        question_text = data["candidates"][0]["content"]["parts"][0]["text"]
        
        # L√†m s·∫°ch text t·ª´ AI
        question_text = question_text.strip()
        if question_text.startswith('"') and question_text.endswith('"'):
            question_text = question_text[1:-1]
        
        logger.info(f"Generated question: {question_text[:100]}...")
        return question_text
        
    except requests.exceptions.Timeout:
        logger.error("Gemini API request timed out")
        raise RuntimeError("Request to Gemini API timed out. Please try again.")
    except requests.exceptions.ConnectionError:
        logger.error("Failed to connect to Gemini API")
        raise RuntimeError("Failed to connect to Gemini API. Please check your internet connection.")
    except requests.exceptions.RequestException as e:
        logger.error(f"Request error: {e}")
        raise RuntimeError(f"Network error: {e}")
    except json.JSONDecodeError as e:
        logger.error(f"JSON decode error: {e}")
        raise RuntimeError("Invalid response from Gemini API")
    except KeyError as e:
        logger.error(f"Missing key in response: {e}")
        raise RuntimeError("Unexpected response format from Gemini API")
    except Exception as e:
        logger.error(f"Unexpected error generating question: {e}")
        raise RuntimeError(f"Error generating question: {e}")


def evaluate_audio_answer(question_text: str, audio_url: str) -> dict:
    """Transcribe audio with AssemblyAI then evaluate using Gemini."""
    assembly_key = os.getenv("ASSEMBLYAI_API_KEY")
    if not assembly_key:
        raise RuntimeError("ASSEMBLYAI_API_KEY not configured")

    headers = {"authorization": assembly_key, "content-type": "application/json"}
    transcript_endpoint = "https://api.assemblyai.com/v2/transcript"

    # Start transcription
    logger.info("üì§ Sending audio to AssemblyAI for transcription")
    start_payload = {
        "audio_url": audio_url,
        "language_code": "vi",  # Force Vietnamese transcription
    }
    start_resp = requests.post(transcript_endpoint, json=start_payload, headers=headers)
    if not start_resp.ok:
        logger.error(f"‚ùå AssemblyAI error: {start_resp.status_code} - {start_resp.text}")
        raise RuntimeError(f"AssemblyAI returned {start_resp.status_code}: {start_resp.text}")

    transcript_id = start_resp.json()["id"]

    # Poll for completion
    logger.info(f"‚åõ Waiting for AssemblyAI transcript {transcript_id}")
    while True:
        poll_resp = requests.get(f"{transcript_endpoint}/{transcript_id}", headers=headers)
        if not poll_resp.ok:
            logger.error(f"‚ùå AssemblyAI polling error: {poll_resp.status_code} - {poll_resp.text}")
            raise RuntimeError(f"AssemblyAI polling returned {poll_resp.status_code}: {poll_resp.text}")
        poll_data = poll_resp.json()
        status = poll_data.get("status")
        if status == "completed":
            transcript_text = poll_data.get("text", "")
            logger.info("‚úÖ AssemblyAI transcription completed")
            break
        if status == "error":
            error_msg = poll_data.get("error", "unknown error")
            logger.error(f"‚ùå AssemblyAI transcription failed: {error_msg}")
            raise RuntimeError(f"AssemblyAI transcription failed: {error_msg}")
        time.sleep(3)

    # Evaluate transcript with Gemini
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        raise RuntimeError("GEMINI_API_KEY not configured")

    endpoint = (
        "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite:generateContent"
    )

    prompt = f"""
B·∫°n l√† m·ªôt chuy√™n gia ph·ªèng v·∫•n. ƒê√°nh gi√° c√¢u tr·∫£ l·ªùi c·ªßa ·ª©ng vi√™n d·ª±a tr√™n c√¢u h·ªèi.

C√¢u h·ªèi: {question_text}
C√¢u tr·∫£ l·ªùi: {transcript_text}

Y√™u c·∫ßu:
- Ch·∫•m ƒëi·ªÉm t·ªïng th·ªÉ theo thang 0-10.
- Ch·∫•m chi ti·∫øt theo 3 ti√™u ch√≠ (0-10): speaking, content, relevance.
- Vi·∫øt ph·∫ßn feedback ng·∫Øn g·ªçn, s√∫c t√≠ch.
- Li·ªát k√™ strengths (3-5 ƒëi·ªÉm m·∫°nh) v√† improvements (3-5 ƒëi·ªÉm c·∫ßn c·∫£i thi·ªán).

B·∫ÆT BU·ªòC TR·∫¢ V·ªÄ JSON H·ª¢P L·ªÜ, ƒê√öNG CHU·∫®N, KH√îNG TH√äM GI·∫¢I TH√çCH, V·ªöI C·∫§U TR√öC:
{{
  "transcript": "{transcript_text}",
  "score": 8.5, (ƒëi·ªÉm trung b√¨nh c·ªßa 3 ti√™u ch√≠ breakdown)
  "breakdown": {{
    "speaking": 8.0,
    "content": 9.0,
    "relevance": 8.5
  }},
  "feedback": "feedback ng·∫Øn g·ªçn v·ªÅ c√¢u tr·∫£ l·ªùi",
  "strengths": ["ƒëi·ªÉm m·∫°nh 1", "ƒëi·ªÉm m·∫°nh 2", "ƒëi·ªÉm m·∫°nh 3"],
  "improvements": ["ƒëi·ªÉm c·∫ßn c·∫£i thi·ªán 1", "ƒëi·ªÉm c·∫ßn c·∫£i thi·ªán 2", "ƒëi·ªÉm c·∫ßn c·∫£i thi·ªán 3"]
}}

L∆∞u √Ω: Ch·ªâ tr·∫£ v·ªÅ JSON thu·∫ßn t√∫y, kh√¥ng b·ªçc trong markdown code blocks, kh√¥ng th√™m text n√†o kh√°c.
"""

    payload = {"contents": [{"parts": [{"text": prompt}]}]}
    logger.info("üì§ Sending evaluation request to Gemini")
    resp = requests.post(endpoint, params={"key": api_key}, json=payload, timeout=60)

    if not resp.ok:
        logger.error(f"‚ùå Gemini API error: {resp.status_code} - {resp.text}")
        raise RuntimeError(f"Gemini API returned {resp.status_code}: {resp.text}")

    data = resp.json()
    if "candidates" not in data or not data["candidates"]:
        logger.error(f"‚ùå No candidates in Gemini response: {data}")
        raise RuntimeError("No candidates in Gemini response")

    text = data["candidates"][0]["content"]["parts"][0]["text"]
    cleaned_text = text.strip()
    if cleaned_text.startswith("```json"):
        cleaned_text = cleaned_text.replace("```json", "").replace("```", "").strip()
    elif cleaned_text.startswith("```"):
        cleaned_text = cleaned_text.replace("```", "").strip()

    logger.info(f"üßπ Cleaned text for JSON parsing: {cleaned_text[:200]}...")
    parsed = json.loads(cleaned_text)
    logger.info(
        f"‚úÖ Gemini evaluation JSON: {json.dumps(parsed, indent=2, ensure_ascii=False)}"
    )
    return parsed


def summarize_transcript(transcript: list[dict], session: InterviewSession | None = None) -> str:
    """Summarize the interview transcript using Gemini API with focus on learning outcomes."""
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        logger.error("GEMINI_API_KEY not found in environment variables")
        raise ValueError("GEMINI_API_KEY not found in environment variables")

    try:
        endpoint = (
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite:generateContent"
        )
        
        conversation = "\n".join(
            f"C√¢u h·ªèi {i+1}: {t['question']}\nTr·∫£ l·ªùi: {t['answer']}\nƒêi·ªÉm: {t['score']}/5\nPh·∫£n h·ªìi: {t['feedback']}\n" 
            for i, t in enumerate(transcript)
        )
        
        # Prompt t√≥m t·∫Øt t·∫≠p trung v√†o k·∫øt qu·∫£ h·ªçc t·∫≠p
        summary_prompt = f"""
B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n ngh·ªÅ nghi·ªáp. H√£y t√≥m t·∫Øt bu·ªïi ph·ªèng v·∫•n luy·ªán t·∫≠p n√†y:

Th√¥ng tin phi√™n ph·ªèng v·∫•n:
- V·ªã tr√≠: {session.role if session else 'N/A'} - {session.position if session else 'N/A'}
- Lƒ©nh v·ª±c: {session.field if session else 'N/A'} / {session.specialization if session else 'N/A'}
- Kinh nghi·ªám: {session.experience_level if session else 'N/A'}

N·ªôi dung ph·ªèng v·∫•n:
{conversation}

H√£y t√≥m t·∫Øt:
1. **T·ªïng quan**: ƒê√°nh gi√° t·ªïng th·ªÉ v·ªÅ bu·ªïi ph·ªèng v·∫•n
2. **ƒêi·ªÉm m·∫°nh**: Nh·ªØng ƒëi·ªÉm t·ªët c·ªßa ·ª©ng vi√™n
3. **ƒêi·ªÉm c·∫ßn c·∫£i thi·ªán**: Nh·ªØng lƒ©nh v·ª±c c·∫ßn ph√°t tri·ªÉn
4. **Khuy·∫øn ngh·ªã**: G·ª£i √Ω c·ª• th·ªÉ ƒë·ªÉ c·∫£i thi·ªán k·ªπ nƒÉng ph·ªèng v·∫•n
5. **ƒê√°nh gi√° t·ªïng th·ªÉ**: X·∫øp lo·∫°i t·ª´ A+ ƒë·∫øn D

Tr·∫£ v·ªÅ t√≥m t·∫Øt b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin.
"""
        
        payload = {"contents": [{"parts": [{"text": summary_prompt}]}]}
        resp = requests.post(endpoint, params={"key": api_key}, json=payload, timeout=30)
        
        logger.info(f"Gemini API summary response status: {resp.status_code}")
        
        if not resp.ok:
            logger.error(f"Gemini API summary error: {resp.status_code} - {resp.text}")
            raise RuntimeError(f"Gemini API returned {resp.status_code}: {resp.text}")
        
        resp.raise_for_status()
        data = resp.json()
        return data["candidates"][0]["content"]["parts"][0]["text"]
        
    except requests.exceptions.Timeout:
        logger.error("Gemini API summary request timed out")
        raise RuntimeError("Request to Gemini API timed out. Please try again.")
    except requests.exceptions.ConnectionError:
        logger.error("Failed to connect to Gemini API for summary")
        raise RuntimeError("Failed to connect to Gemini API. Please check your internet connection.")
    except Exception as e:
        logger.error(f"Error summarizing transcript: {e}")
        raise RuntimeError(f"Error summarizing transcript: {e}")



